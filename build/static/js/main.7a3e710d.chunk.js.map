{"version":3,"sources":["app/material-styles.js","features/table/tableSlice.js","features/debug/debugSlice.js","features/debug/Debug.js","app/material-icons.js","features/table/DetailsPanel.js","features/table/Table.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["muiTheme","createMuiTheme","palette","primary","blue","secondary","teal","typography","fontSize","getDataPage","query","Promise","resolve","reject","a","url","pageSize","page","axios","get","response","data","total","totalCount","processNewPage","createAsyncThunk","dataPromise","dispatch","getState","preloadDetails","table","items","row","itemId","id","fetchDetailsById","setTimeout","avatar","email","first_name","last_name","icon","description","tableSlice","createSlice","name","initialState","maxSaved","recentItems","maxOpenPanels","openPanels","currentPageIds","reducers","registerItemHit","state","action","payload","seenIdx","indexOf","splice","push","length","removeId","shift","setPanelStateOpen","rowId","openPanelsIdx","setPanelStateClosed","setPanelStateAllClosed","setPageSize","togglePreload","extraReducers","pending","meta","arg","status","fulfilled","actions","debugSlice","count","increment","decrement","useStyles","makeStyles","theme","button","margin","spacing","Debug","classes","useDispatch","useSelector","debug","Button","variant","className","color","onClick","tableIcons","DetailPanel","forwardRef","props","ref","ChevronRight","FirstPage","LastPage","NextPage","PreviousPage","ChevronLeft","ResetSearch","Clear","Search","SortArrow","ArrowDownward","Retry","Replay","SpamUnset","Delete","SpamSet","HamUnset","CheckBox","HamSet","panelRoot","backgroundColor","grey","maxHeight","overflowY","padding","cardRoot","display","alignItems","cardContent","flex","cardText","overflowWrap","cardIcon","width","height","maxWidth","DetailsPanel","rowData","closeRowPanel","tableData","details","isOpenState","useEffect","textLines","replace","split","Grid","container","justify","item","xs","Card","CardContent","Typography","component","map","line","index","CardMedia","image","title","actionHeader","justifyContent","Table","tableRef","useRef","currentPageSize","columns","field","cellStyle","align","render","prediction","Math","random","toFixed","showDetailPanel","current","onToggleDetailPanel","detailPanel","icons","onRowClick","event","togglePanel","isOpen","handleTogglePanel","onChangePage","_","options","actionsCellStyle","actionsColumnIndex","rowStyle","label","tooltip","localization","header","root","App","Container","configureStore","reducer","tableReducer","debugReducer","Boolean","window","location","hostname","match","ReactDOM","StrictMode","store","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a3e710d.chunk.js","sourcesContent":["/**\n * Material UI: Utility classes\n */\n\n// https://stackoverflow.com/questions/61220424/material-ui-drawer-finddomnode-is-deprecated-in-strictmode\nimport { unstable_createMuiStrictModeTheme as createMuiTheme } from \"@material-ui/core\";\nimport { blue, teal } from \"@material-ui/core/colors\";\n\nexport const muiTheme = createMuiTheme({\n  palette: {\n    primary: blue,\n    secondary: teal,\n  },\n  typography: {\n    fontSize: 14,\n  },\n});\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n/**\n * Grabs a specified page of data from the API server.\n * N.B.: This particular function is *NOT* a thunk, because `material-table` expects a simple function that returns\n * a promise when dealing with remote data.\n * We keep it here together with the main reducer logic anyway to keep the API call out of the Table component.\n * @param query\n * @returns {Promise<Object>}\n */\nexport const getDataPage = (query) =>\n  new Promise(async (resolve, reject) => {\n    try {\n      // API call\n      let url = \"https://reqres.in/api/users\";\n      url += \"?per_page=\" + query.pageSize;\n      url += \"&page=\" + (query.page + 1);\n\n      const response = await axios.get(url);\n\n      const { data, page, total } = response.data;\n\n      resolve({\n        data,\n        page: page - 1,\n        totalCount: total,\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n\n/**\n * Processes a new page of remote data, recording the item IDs and preloading item details as appropriate.\n */\nexport const processNewPage = createAsyncThunk(\n  \"table/processNewPage\",\n  async (dataPromise, { dispatch, getState }) => {\n    const preloadDetails = getState().table.preloadDetails;\n    const items = getState().table.items;\n\n    if (preloadDetails) {\n      const { data } = await dataPromise;\n      new Promise(async () => {\n        for (const row of data) {\n          const itemId = row.id;\n          if (!items[itemId]) {\n            dispatch(fetchDetailsById(itemId));\n            // Let's proactively rate-limit ourselves to not crash the API\n            await new Promise((resolve) => setTimeout(resolve, 125));\n          }\n        }\n      });\n    }\n  }\n);\n\n/**\n * Dispatch a request for a given item to the API server and store the results in the item cache.\n */\nexport const fetchDetailsById = createAsyncThunk(\n  \"details/fetchById\",\n  async (itemId) => {\n    const response = await axios.get(`https://reqres.in/api/users/${itemId}`);\n\n    let { avatar, email, first_name, last_name } = response.data.data;\n\n    const icon = avatar;\n    const description = `${first_name} ${last_name}\n${email}\n \nLorem ipsum dolor sit amet, consectetur adipiscing elit. Integer purus justo, dignissim ut efficitur sit amet, mollis quis libero. Vivamus quis magna volutpat, commodo elit id, aliquet massa. Quisque congue felis eget diam ultricies, ultricies suscipit felis aliquam. Integer ullamcorper volutpat semper. Curabitur a mauris ornare, facilisis odio eget, mollis elit. Nam molestie erat ac quam scelerisque iaculis. Quisque ac felis auctor, viverra orci eget, dignissim metus.\n`;\n\n    return {\n      id: itemId,\n      icon,\n      description,\n    };\n  }\n);\n\nconst tableSlice = createSlice({\n  name: \"table\",\n  initialState: {\n    // We keep an LRU cache of recently viewed items so that we don't keep hitting the API server.\n    // Item IDs are used as entries in `recentItems` and keys for `items`.\n    maxSaved: 100,\n    recentItems: [],\n    items: {},\n\n    // Similarly, we limit the number of open detail panels at once to avoid clutter.\n    // If `maxOpenPanels` is larger than `maxSaved`, up to `maxSaved` panels will be open at once.\n    // (Items dropped from the LRU cache will have their panels closed automatically.)\n    // Row IDs are used as keys for `openPanels`.\n    maxOpenPanels: 1,\n    openPanels: [],\n\n    // Although `material-table` does not natively allow managing remote data via controlled state, we keep track of\n    // a couple of important details so that we can keep the Table component as clean as possible.\n    pageSize: 10,\n    preloadDetails: false,\n    currentPageIds: [],\n  },\n  reducers: {\n    // Items\n    // -----\n    registerItemHit: (state, action) => {\n      // Registers a hit against the LRU cache for the given item, and prunes the cache if necessary.\n      const itemId = action.payload;\n\n      // Hit ...\n      const seenIdx = state.recentItems.indexOf(itemId);\n      if (seenIdx > -1) {\n        state.recentItems.splice(seenIdx, 1);\n      }\n      state.recentItems.push(itemId);\n\n      // ... and prune\n      while (state.recentItems.length > state.maxSaved) {\n        const removeId = state.recentItems.shift();\n        delete state.items[removeId];\n      }\n    },\n\n    // Detail panels\n    // -------------\n    setPanelStateOpen: (state, action) => {\n      // Material-table's detail panel toggling is imperative --\n      // We keep our own records of which panels are open so that we can initialise/close them programmatically.\n      const rowId = action.payload;\n\n      // Hit\n      const openPanelsIdx = state.openPanels.indexOf(rowId);\n      if (openPanelsIdx > -1) {\n        state.openPanels.splice(openPanelsIdx, 1);\n      }\n      state.openPanels.push(rowId);\n\n      // Prune\n      while (state.openPanels.length > state.maxOpenPanels) {\n        state.openPanels.shift();\n      }\n    },\n    setPanelStateClosed: (state, action) => {\n      const rowId = action.payload;\n      const openPanelsIdx = state.openPanels.indexOf(rowId);\n      if (openPanelsIdx > -1) {\n        state.openPanels.splice(openPanelsIdx, 1);\n      }\n    },\n    setPanelStateAllClosed: (state) => {\n      state.openPanels = [];\n    },\n\n    // Pagination and data\n    // -------------------\n    setPageSize: (state, action) => {\n      // `material-table` also tells us what the current page size is\n      state.pageSize = action.payload;\n    },\n    togglePreload: (state) => {\n      state.preloadDetails = !state.preloadDetails;\n    },\n  },\n  extraReducers: {\n    // Item retrieval\n    // --------------\n    [fetchDetailsById.pending]: (state, action) => {\n      const id = action.meta.arg;\n      state.items[id] = {\n        status: \"Pending\",\n        ...state.items[id],\n      };\n    },\n    [fetchDetailsById.fulfilled]: (state, action) => {\n      const { id } = action.payload;\n      state.items[id] = { status: \"Cached\", ...action.payload };\n    },\n  },\n});\n\nexport const {\n  registerItemHit,\n  setPanelStateOpen,\n  setPanelStateClosed,\n  setPanelStateAllClosed,\n  setPageSize,\n  togglePreload,\n} = tableSlice.actions;\n\nexport default tableSlice.reducer;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst debugSlice = createSlice({\n  name: \"debug\",\n  initialState: {\n    count: 0,\n  },\n  reducers: {\n    increment: (state) => {\n      state.count += 1;\n    },\n    decrement: (state) => {\n      state.count -= 1;\n    },\n  },\n});\n\nexport const { increment, decrement } = debugSlice.actions;\n\nexport default debugSlice.reducer;\n","/**\n * Debug component\n */\n\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { togglePreload } from \"../table/tableSlice\";\nimport { decrement, increment } from \"./debugSlice\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(2),\n  },\n}));\n\nfunction Debug() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const count = useSelector((state) => state.debug.count);\n  const preloadDetails = useSelector((state) => state.table.preloadDetails);\n\n  return (\n    <>\n      <span>{count}</span>\n      <Button\n        variant=\"contained\"\n        className={classes.button}\n        color={\"primary\"}\n        onClick={() => dispatch(increment())}\n      >\n        Increment\n      </Button>\n      <Button\n        variant=\"contained\"\n        className={classes.button}\n        color={\"secondary\"}\n        onClick={() => dispatch(decrement())}\n      >\n        Decrement\n      </Button>\n      <span>Preload: {preloadDetails ? \"True\" : \"False\"}</span>\n      <Button\n        variant=\"contained\"\n        className={classes.button}\n        color={\"primary\"}\n        onClick={() => dispatch(togglePreload())}\n      >\n        Toggle Preload\n      </Button>\n    </>\n  );\n}\n\nexport default Debug;\n","/**\n * Material UI: Icons for the Table component\n */\n\nimport {\n  ArrowDownward,\n  CheckBox,\n  ChevronLeft,\n  ChevronRight,\n  Clear,\n  Delete,\n  FirstPage,\n  LastPage,\n  Replay,\n  Search,\n} from \"@material-ui/icons\";\nimport React, { forwardRef } from \"react\";\n\nexport const tableIcons = {\n  // Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  // Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  // Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  // Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  // Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  // Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  // Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  // ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  // ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  Retry: forwardRef((props, ref) => <Replay {...props} ref={ref} />),\n\n  SpamUnset: forwardRef((props, ref) => (\n    <Delete color={\"disabled\"} {...props} ref={ref} />\n  )),\n  SpamSet: forwardRef((props, ref) => (\n    <Delete color={\"primary\"} {...props} ref={ref} />\n  )),\n  HamUnset: forwardRef((props, ref) => (\n    <CheckBox color={\"disabled\"} {...props} ref={ref} />\n  )),\n  HamSet: forwardRef((props, ref) => (\n    <CheckBox color={\"primary\"} {...props} ref={ref} />\n  )),\n};\n","import {\r\n  Card,\r\n  CardContent,\r\n  CardMedia,\r\n  Grid,\r\n  makeStyles,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  panelRoot: {\r\n    backgroundColor: theme.palette.grey[\"50\"],\r\n    maxHeight: \"300px\",\r\n    overflowY: \"scroll\",\r\n    padding: theme.spacing(2),\r\n  },\r\n  cardRoot: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  cardContent: {\r\n    flex: \"1 1 auto\",\r\n  },\r\n  cardText: {\r\n    overflowWrap: \"break-word\",\r\n  },\r\n  cardIcon: {\r\n    flex: \"1 0 auto\",\r\n    width: 80,\r\n    height: 80,\r\n    maxHeight: 80,\r\n    maxWidth: 80,\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\n/**\r\n * Renders the Details panel for a given table row\r\n *\r\n * @param rowData\r\n * @property rowData.id\r\n * @param tableRef\r\n * @returns {JSX.Element}\r\n */\r\nexport function DetailsPanel({ rowData, closeRowPanel }) {\r\n  const itemId = rowData.id;\r\n  const rowId = rowData.tableData.id;\r\n\r\n  const classes = useStyles();\r\n  const details = useSelector((state) => state.table.items[itemId]);\r\n  const isOpenState = useSelector(\r\n    (state) => state.table.openPanels.indexOf(rowId) > -1\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!details || !isOpenState) {\r\n      // The panel is due for rendering, but it either has no contents (they were probably dropped from the LRU\r\n      // cache) or there are too many panels open.\r\n      closeRowPanel(rowData);\r\n    }\r\n  });\r\n\r\n  let description = \"Loading...\";\r\n  let icon = \"/apple-touch-icon.png\";\r\n  if (details?.status === \"Cached\") {\r\n    description = details.description;\r\n    icon = details.icon;\r\n  }\r\n\r\n  // Remove extraneous newlines, prepare to display using <br/>s\r\n  // (React doesn't let us render strings as HTML directly by default)\r\n  const textLines = description\r\n    .replace(/(\\s*\\r?\\n\\r?){4,}/g, \"\\n\\n\\n\")\r\n    .split(/\\r?\\n\\r?/);\r\n  return (\r\n    <Grid container justify=\"center\" className={classes.panelRoot}>\r\n      <Grid item xs={12}>\r\n        <Card className={classes.cardRoot}>\r\n          <CardContent className={classes.cardContent}>\r\n            <Typography variant={\"body2\"} component={\"div\"}>\r\n              {textLines.map((line, index) => (\r\n                <div className={classes.cardText} key={index}>\r\n                  {line}\r\n                  <br />\r\n                </div>\r\n              ))}\r\n            </Typography>\r\n          </CardContent>\r\n          <CardMedia className={classes.cardIcon} image={icon} title={\"Icon\"} />\r\n        </Card>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","/**\n * Worked example of using MaterialTable for loading remote data.\n */\n\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport MaterialTable from \"material-table\";\nimport React, { useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { tableIcons } from \"../../app/material-icons\";\nimport { decrement, increment } from \"../debug/debugSlice\";\nimport { DetailsPanel } from \"./DetailsPanel\";\nimport \"./Table.css\";\nimport {\n  fetchDetailsById,\n  getDataPage,\n  processNewPage,\n  registerItemHit,\n  setPageSize,\n  setPanelStateAllClosed,\n  setPanelStateClosed,\n  setPanelStateOpen,\n} from \"./tableSlice\";\n\nconst useStyles = makeStyles((theme) => ({\n  actionHeader: {\n    width: \"120px\",\n    display: \"flex\",\n    justifyContent: \"space-evenly\",\n  },\n}));\n\nfunction Table() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const tableRef = useRef(null);\n  const items = useSelector((state) => state.table.items);\n  const openPanels = useSelector((state) => state.table.openPanels);\n  const currentPageSize = useSelector((state) => state.table.pageSize);\n\n  // Prepare the table parameters\n  const columns = [\n    {\n      title: \"ID\",\n      field: \"id\",\n      cellStyle: {\n        width: \"50px\",\n      },\n      // This is a bit of an ugly workaround, but:\n      // https://github.com/mbrn/material-table/issues/291\n      width: null,\n    },\n    { title: \"Name\", field: \"first_name\" },\n    {\n      title: \"Status\",\n      field: \"status\",\n      align: \"center\",\n      cellStyle: {\n        width: \"120px\",\n      },\n      render: (rowData) => <span>[Debug]</span>,\n    },\n    {\n      title: \"Prediction\",\n      field: \"prediction\",\n      align: \"center\",\n      cellStyle: {\n        width: \"120px\",\n      },\n      render: (rowData) => {\n        rowData.prediction = (Math.random() * 100).toFixed(2);\n        return rowData.prediction > 50 ? (\n          <Typography variant={\"body2\"} color={\"primary\"}>\n            <b>{`${rowData.prediction}%`}</b>\n          </Typography>\n        ) : (\n          <Typography variant={\"body2\"} color={\"textSecondary\"}>\n            {`${rowData.prediction}%`}\n          </Typography>\n        );\n      },\n    },\n  ];\n\n  // Utility functions\n  // -----------------\n  // Give the details panel the ability to close itself\n  const closeRowPanel = (rowData) => {\n    const rowId = rowData.tableData.id;\n    const isOpen = rowData.tableData.showDetailPanel;\n\n    // Sanity check -- Because material-table's imperative function is a toggle, we make sure the panel is actually\n    // open before calling it.\n    if (isOpen) {\n      tableRef.current.onToggleDetailPanel(\n        [rowId],\n        tableRef.current.props.detailPanel\n      );\n    }\n\n    // And update our internal panel monitor\n    dispatch(setPanelStateClosed(rowId));\n  };\n\n  // Material-table's detail panel is toggled imperatively, so we need a little workaround to monitor which panels\n  // are open and control panel state.\n  const handleTogglePanel = (rowData, togglePanel) => {\n    const itemId = rowData.id;\n    const rowId = rowData.tableData.id;\n\n    const details = items[itemId];\n    const isOpenState = openPanels.indexOf(rowId) > -1;\n    const isOpen = rowData.tableData.showDetailPanel;\n\n    if (!isOpenState) {\n      // Internally, the panel was closed, and it is now being opened by rowClick.\n\n      // Reload the data if necessary, or register a hit if the details are still cached.\n      if (!details) {\n        dispatch(registerItemHit(itemId));\n        dispatch(fetchDetailsById(itemId));\n      } else if (details.status === \"Cached\") {\n        dispatch(registerItemHit(itemId));\n      }\n\n      // If the panel is not actually open, toggle it imperatively...\n      if (!isOpen) {\n        togglePanel();\n      }\n\n      // ... And update our internal panel monitor.\n      dispatch(setPanelStateOpen(rowData.tableData.id));\n    } else {\n      // Internally, the panel was open, and it is now being closed by rowClick.\n      if (isOpen) {\n        togglePanel();\n      }\n      dispatch(setPanelStateClosed(rowData.tableData.id));\n    }\n  };\n\n  return (\n    <div className={\"main-table\"}>\n      <MaterialTable\n        tableRef={tableRef}\n        icons={tableIcons}\n        columns={columns}\n        data={async (query) => {\n          // Retrieve the remote data, but also let our store know that a new page is incoming.\n          const dataPromise = getDataPage(query);\n          dispatch(processNewPage(dataPromise));\n          return dataPromise;\n        }}\n        title=\"Material-Table Remote Data Demo\"\n        detailPanel={(rowData) => (\n          <DetailsPanel rowData={rowData} closeRowPanel={closeRowPanel} />\n        )}\n        onRowClick={(event, rowData, togglePanel) => {\n          handleTogglePanel(rowData, togglePanel);\n        }}\n        onChangePage={(_, pageSize) => {\n          dispatch(setPanelStateAllClosed());\n          dispatch(setPageSize(pageSize));\n        }}\n        options={{\n          actionsCellStyle: {\n            width: \"120px\",\n            // display: \"flex\",\n            justifyContent: \"space-evenly\",\n          },\n          actionsColumnIndex: -1,\n          rowStyle: {},\n          pageSize: currentPageSize,\n        }}\n        actions={[\n          (rowData) => ({\n            icon:\n              rowData.label === \"1\" ? tableIcons.HamSet : tableIcons.HamUnset,\n            tooltip: rowData.label === \"1\" ? \"Marked as Ham\" : \"Mark as Ham\",\n            onClick: (event, rowData) => {\n              if (rowData.label !== \"1\") {\n                dispatch(increment());\n              }\n            },\n          }),\n          (rowData) => ({\n            icon:\n              rowData.label === \"-1\"\n                ? tableIcons.SpamSet\n                : tableIcons.SpamUnset,\n            tooltip: rowData.label === \"-1\" ? \"Marked as Spam\" : \"Mark as Spam\",\n            onClick: (event, rowData) => {\n              if (rowData.label !== \"-1\") {\n                dispatch(decrement());\n              }\n            },\n          }),\n        ]}\n        localization={{\n          header: {\n            actions: (\n              <div className={classes.actionHeader}>\n                <div>Ham</div>\n                <div>/</div>\n                <div>Spam</div>\n              </div>\n            ),\n          },\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Table;\n","import { Container, makeStyles, MuiThemeProvider } from \"@material-ui/core\";\nimport React from \"react\";\nimport { muiTheme } from \"./app/material-styles\";\nimport Debug from \"./features/debug/Debug\";\nimport Table from \"./features/table/Table\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(6),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <MuiThemeProvider theme={muiTheme}>\n      <Container maxWidth=\"xl\" className={classes.root}>\n        <Table />\n        <Debug />\n      </Container>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport tableReducer from \"../features/table/tableSlice\";\nimport debugReducer from \"../features/debug/debugSlice\";\n\nexport default configureStore({\n  reducer: {\n    table: tableReducer,\n    debug: debugReducer,\n  },\n});\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { CssBaseline } from \"@material-ui/core\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"typeface-roboto\";\nimport App from \"./App\";\nimport store from \"./app/store\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <CssBaseline />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}